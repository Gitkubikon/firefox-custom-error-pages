#!/bin/bash

# Manual apply script - bypasses interactive prompts completely

PROJECT_DIR="$HOME/Projects/shens/zenPages"
ZEN_PATH="/opt/zen-twilight-bin"
OMNI_FILE="$ZEN_PATH/omni.ja"
WORK_DIR="/tmp/zen_manual_apply"

# Colors
GREEN='\033[0;32m'
BLUE='\033[0;34m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m'

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# Check prerequisites
if [ ! -d "$PROJECT_DIR" ]; then
    print_error "Project directory not found: $PROJECT_DIR"
    exit 1
fi

if [ ! -f "$OMNI_FILE" ]; then
    print_error "omni.ja not found: $OMNI_FILE"
    exit 1
fi

print_status "Manual apply process starting..."

# 1. Kill any running Zen processes (including twilight)
print_status "Stopping Zen Browser processes..."
pkill -f "zen" 2>/dev/null || true
pkill -f "twilight" 2>/dev/null || true
pkill -f "zen-twilight" 2>/dev/null || true
sleep 3

# 2. Create working directory
print_status "Setting up working directory..."
rm -rf "$WORK_DIR"
mkdir -p "$WORK_DIR"
cd "$WORK_DIR"

# 3. Create backup
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
print_status "Creating backup..."
sudo cp "$OMNI_FILE" "$PROJECT_DIR/backups/omni.ja.manual_backup.$TIMESTAMP"

# 4. Extract with forced overwrite (no prompts)
print_status "Extracting omni.ja (this may show warnings - that's normal)..."
unzip -o "$OMNI_FILE" >/dev/null 2>&1
if [ $? -ne 0 ]; then
    print_warning "Extraction had warnings, but continuing..."
fi

# 5. Copy modified files back
print_status "Copying your modified files back..."

# Content files
if [ -f "$PROJECT_DIR/content/global/aboutNetError.html" ]; then
    cp "$PROJECT_DIR/content/global/aboutNetError.html" "$WORK_DIR/chrome/toolkit/content/global/"
    print_success "✓ aboutNetError.html"
fi

if [ -f "$PROJECT_DIR/content/global/aboutNetError.mjs" ]; then
    cp "$PROJECT_DIR/content/global/aboutNetError.mjs" "$WORK_DIR/chrome/toolkit/content/global/"
    print_success "✓ aboutNetError.mjs"
fi

if [ -f "$PROJECT_DIR/content/global/aboutNetErrorHelpers.mjs" ]; then
    cp "$PROJECT_DIR/content/global/aboutNetErrorHelpers.mjs" "$WORK_DIR/chrome/toolkit/content/global/"
    print_success "✓ aboutNetErrorHelpers.mjs"
fi

if [ -f "$PROJECT_DIR/content/global/net-error-card.mjs" ]; then
    cp "$PROJECT_DIR/content/global/net-error-card.mjs" "$WORK_DIR/chrome/toolkit/content/global/"
    print_success "✓ net-error-card.mjs"
fi

# CSS files
if [ -f "$PROJECT_DIR/skin/css/aboutNetError.css" ]; then
    cp "$PROJECT_DIR/skin/css/aboutNetError.css" "$WORK_DIR/chrome/toolkit/skin/classic/global/"
    print_success "✓ aboutNetError.css"
fi

if [ -f "$PROJECT_DIR/skin/css/aboutHttpsOnlyError.css" ]; then
    cp "$PROJECT_DIR/skin/css/aboutHttpsOnlyError.css" "$WORK_DIR/chrome/toolkit/skin/classic/global/"
    print_success "✓ aboutHttpsOnlyError.css"
fi

if [ -f "$PROJECT_DIR/skin/css/error-pages.css" ]; then
    cp "$PROJECT_DIR/skin/css/error-pages.css" "$WORK_DIR/chrome/toolkit/skin/classic/global/"
    print_success "✓ error-pages.css"
fi

# HTTPS-only error files
if [ -d "$PROJECT_DIR/content/httpsonlyerror" ]; then
    cp -r "$PROJECT_DIR/content/httpsonlyerror"/* "$WORK_DIR/chrome/toolkit/content/global/httpsonlyerror/" 2>/dev/null
    print_success "✓ httpsonlyerror files"
fi

# Neterror files
if [ -d "$PROJECT_DIR/content/neterror" ]; then
    cp -r "$PROJECT_DIR/content/neterror"/* "$WORK_DIR/chrome/toolkit/content/global/neterror/" 2>/dev/null
    print_success "✓ neterror files"
fi

# Localization files
if [ -d "$PROJECT_DIR/localization/en-US/neterror" ]; then
    cp -r "$PROJECT_DIR/localization/en-US/neterror"/* "$WORK_DIR/localization/en-US/toolkit/neterror/" 2>/dev/null
    print_success "✓ localization files"
fi

# Icons and illustrations
if [ -f "$PROJECT_DIR/skin/icons/error.svg" ]; then
    cp "$PROJECT_DIR/skin/icons/error.svg" "$WORK_DIR/chrome/toolkit/skin/classic/global/icons/"
    print_success "✓ error.svg"
fi

if [ -d "$PROJECT_DIR/skin/illustrations" ]; then
    cp "$PROJECT_DIR/skin/illustrations"/* "$WORK_DIR/chrome/toolkit/skin/classic/global/illustrations/" 2>/dev/null
    print_success "✓ illustrations"
fi

# 6. Repack with compression level 0 (CRITICAL!)
print_status "Repacking omni.ja (compression level 0)..."
zip -r -0 -q "$WORK_DIR/omni.ja.new" * >/dev/null 2>&1

if [ ! -f "$WORK_DIR/omni.ja.new" ]; then
    print_error "Failed to create new omni.ja!"
    exit 1
fi

# 7. Test archive integrity
print_status "Testing archive integrity..."
if unzip -t "$WORK_DIR/omni.ja.new" >/dev/null 2>&1; then
    print_success "✓ Archive integrity OK"
else
    print_error "✗ Archive integrity failed!"
    exit 1
fi

# 8. Install new omni.ja
print_status "Installing new omni.ja (requires sudo)..."
sudo cp "$WORK_DIR/omni.ja.new" "$OMNI_FILE"

if [ $? -eq 0 ]; then
    print_success "✓ Installation successful!"
else
    print_error "✗ Installation failed!"
    exit 1
fi

# 9. Set proper permissions
sudo chown root:root "$OMNI_FILE"
sudo chmod 644 "$OMNI_FILE"

# 10. Cleanup
cd /
rm -rf "$WORK_DIR"

print_success "Manual apply completed successfully!"
echo
print_warning "IMPORTANT: You MUST restart Zen Browser completely:"
print_warning "1. Close ALL Zen windows"
print_warning "2. Run: pkill -f zen-twilight"
print_warning "3. Wait 5 seconds"
print_warning "4. Start Zen Browser fresh"
print_warning "5. Test by visiting: http://thiswebsitedoesnotexist12345.com"
echo
print_status "If you made the test modification, you should see a bright red error page!"
print_status "Backup created at: $PROJECT_DIR/backups/omni.ja.manual_backup.$TIMESTAMP"